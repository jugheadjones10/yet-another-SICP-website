"use strict";(self.webpackChunksicp_docu=self.webpackChunksicp_docu||[]).push([[540],{3905:function(e,n,r){r.d(n,{Zo:function(){return m},kt:function(){return l}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=t.createContext({}),p=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},m=function(e){var n=p(e.components);return t.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),s=p(r),l=a,f=s["".concat(u,".").concat(l)]||s[l]||d[l]||i;return r?t.createElement(f,o(o({ref:n},m),{},{components:r})):t.createElement(f,o({ref:n},m))}));function l(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=s;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},6226:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return m},default:function(){return s}});var t=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],c={},u=void 0,p={unversionedId:"chapter-2/section-2.3",id:"chapter-2/section-2.3",isDocsHomePage:!1,title:"section-2.3",description:"`scheme",source:"@site/docs/chapter-2/section-2.3.md",sourceDirName:"chapter-2",slug:"/chapter-2/section-2.3",permalink:"/chapter-2/section-2.3",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/chapter-2/section-2.3.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Exercise 2.1",permalink:"/chapter-2/intro-to-data-abstraction/template"}},m=[],d={toc:m};function s(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scheme"},"(define (deriv exp var)\n  (cond ((number? exp) 0)\n        ((variable? exp)\n         (if (same-variable? exp var) 1 0))\n        ((sum? exp)\n         (make-sum (deriv (addend exp) var)\n                   (deriv (augend exp) var)))\n        ((product? exp)\n         (make-sum\n           (make-product (multiplier exp)\n                         (deriv (multiplicand exp) var))\n           (make-product (deriv (multiplier exp) var)\n                         (multiplicand exp))))\n        (else\n         (error \"unknown expression type -- DERIV\" exp))))\n\n;; representing algebraic expressions\n\n(define (variable? x) (symbol? x))\n\n(define (same-variable? v1 v2)\n  (and (variable? v1) (variable? v2) (eq? v1 v2)))\n\n(define (make-sum a1 a2) (list '+ a1 a2))\n\n(define (make-product m1 m2) (list '* m1 m2))\n\n(define (sum? x)\n  (and (pair? x) (eq? (car x) '+)))\n\n(define (addend s) (cadr s))\n\n(define (augend s) (caddr s))\n\n(define (product? x)\n  (and (pair? x) (eq? (car x) '*)))\n\n(define (multiplier p) (cadr p))\n\n(define (multiplicand p) (caddr p))\n\n\n;: (deriv '(+ x 3) 'x)\n;: (deriv '(* x y) 'x)\n;: (deriv '(* (* x y) (+ x 3)) 'x)\n\n\n;; With simplification\n\n(define (make-sum a1 a2)\n  (cond ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2)) (+ a1 a2))\n        (else (list '+ a1 a2))))\n\n(define (=number? exp num)\n  (and (number? exp) (= exp num)))\n\n(define (make-product m1 m2)\n  (cond ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2)) (* m1 m2))\n        (else (list '* m1 m2))))\n\n")))}s.isMDXComponent=!0}}]);